generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rider {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  club        String?
  uciId       String?  @unique
  email       String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  results     Result[]
  mergedInto  Rider?   @relation("MergedRiders", fields: [mergedIntoId], references: [id])
  mergedIntoId String?
  mergedFrom  Rider[]  @relation("MergedRiders")
  
  @@unique([firstName, lastName, club])
  @@index([firstName, lastName])
  @@index([uciId])
}

model Series {
  id              String   @id @default(cuid())
  name            String   @unique
  description     String?
  pointSystemType String   // "ENDURO", "DH_KVAL", "DH_RACE", "CUSTOM"
  customPoints    Int[]    // Custom point array if pointSystemType is CUSTOM
  teamBased       Boolean  @default(false)
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  events          Event[]
  standings       Standing[]
  teamStandings   TeamStanding[]
}

model Event {
  id          String   @id @default(cuid())
  name        String
  date        DateTime?
  location    String?
  seriesId    String
  series      Series   @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  results     Result[]
  
  @@unique([seriesId, name])
  @@index([seriesId])
}

model Result {
  id          String   @id @default(cuid())
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  riderId     String
  rider       Rider    @relation(fields: [riderId], references: [id], onDelete: Cascade)
  className   String   // "Elite Men", "Junior Women", etc.
  position    Int
  points      Int
  invalid     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([eventId, riderId, className])
  @@index([eventId])
  @@index([riderId])
  @@index([className])
}

model Standing {
  id          String   @id @default(cuid())
  seriesId    String
  series      Series   @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  riderId     String
  className   String
  totalPoints Int
  eventCount  Int
  updatedAt   DateTime @updatedAt
  
  @@unique([seriesId, riderId, className])
  @@index([seriesId, className])
}

model TeamStanding {
  id          String   @id @default(cuid())
  seriesId    String
  series      Series   @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  teamName    String   // Club name
  className   String
  totalPoints Int
  riderCount  Int
  updatedAt   DateTime @updatedAt
  
  @@unique([seriesId, teamName, className])
  @@index([seriesId, className])
}

model DuplicateGroup {
  id          String   @id @default(cuid())
  riderIds    String[] // Array of rider IDs that are potential duplicates
  similarity  Float    // Similarity score 0-1
  resolved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  @@index([resolved])
}
